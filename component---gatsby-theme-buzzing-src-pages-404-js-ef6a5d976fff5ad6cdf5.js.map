{"version":3,"sources":["webpack:///../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///../gatsby-theme-buzzing/src/gatsby-theme-timeline/components/seo.js","webpack:///../node_modules/gatsby-theme-i18n/src/components/localized-link.js","webpack:///../gatsby-theme-buzzing/utils/index.js","webpack:///../gatsby-theme-buzzing/src/pages/404.js","webpack:///../node_modules/url-join/lib/url-join.js","webpack:///../gatsby-theme-buzzing/src/util.js"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","SEO","description","lang","meta","title","imageSource","imageAlt","location","pageType","item","useStaticQuery","site","avatar","defaultImage","locale","useLocalization","siteDescription","t","siteMetadata","localize","metaDescription","telegram","author","siteUrl","keywords","avatarImage","childImageSharp","fixed","src","getImagePath","imageURI","match","urlJoin","withPrefix","image","fluid","imageAltText","siteTitle","pageTitle","authorJSONLD","name","logoJSONLD","url","caption","schemaOrgJSONLD","postURL","pathname","datePublished","Date","date","push","itemListElement","position","headline","publisher","logo","htmlAttributes","content","join","property","concat","type","JSON","stringify","defaultProps","LocalizedLink","to","language","props","defaultLang","linkLocale","localizedPath","exports","kebabToSnakeCase","str","replace","defaultValue","value","Array","isArray","localeItem","getTitle","finalTitle","parent","provider","titleArr","split","pureTitle","pureTagline","sharedContent","field","startsWith","getSharedTitle","getExcerpt","finalExcerpt","excerpt","NotFoundPage","style","width","height","display","justifyContent","alignItems","className","normalize","strArray","resultArray","TypeError","first","shift","component","parts","arguments","slice","call","module","definition"],"mappings":"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","file":"component---gatsby-theme-buzzing-src-pages-404-js-ef6a5d976fff5ad6cdf5.js","sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql, withPrefix } from \"gatsby\"\nimport { useLocalization } from \"gatsby-theme-i18n\"\nimport urlJoin from \"url-join\"\nimport { t } from \"../../util\"\nfunction SEO({\n  description,\n  lang,\n  meta,\n  title,\n  imageSource,\n  imageAlt,\n  location,\n  pageType,\n  item,\n}) {\n  const { site, avatar, defaultImage } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n            keywords\n            telegram\n            localize {\n              locale\n              title\n              description\n              author\n              keywords\n            }\n          }\n        }\n        defaultImage: file(\n          absolutePath: { regex: \"/avatar.(jpeg|jpg|gif|png)/\" }\n        ) {\n          childImageSharp {\n            fluid(maxWidth: 630, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        avatar: file(absolutePath: { regex: \"/avatar.(jpeg|jpg|gif|png)/\" }) {\n          childImageSharp {\n            fixed(width: 48, height: 48) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const { locale } = useLocalization()\n  const siteDescription = t(\n    \"description\",\n    site.siteMetadata.localize,\n    site.siteMetadata.description,\n    locale\n  )\n  const metaDescription = description || siteDescription\n  const telegram = site.siteMetadata.telegram\n\n  const author = t(\n    \"author\",\n    site.siteMetadata.localize,\n    site.siteMetadata.author,\n    locale\n  )\n  const siteUrl = site.siteMetadata.siteUrl\n  const keywords = t(\n    \"keywords\",\n    site.siteMetadata.localize,\n    site.siteMetadata.keywords,\n    locale\n  )\n  const avatarImage = avatar.childImageSharp.fixed.src\n  const getImagePath = imageURI => {\n    if (\n      !imageURI.match(\n        `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n      )\n    )\n      return urlJoin(siteUrl, withPrefix(imageURI))\n\n    return imageURI\n  }\n  const image = imageSource\n    ? getImagePath(imageSource)\n    : getImagePath(\n        defaultImage ? defaultImage?.childImageSharp?.fluid.src : null\n      )\n  const imageAltText = imageAlt || metaDescription\n  const siteTitle = t(\n    \"title\",\n    site.siteMetadata.localize,\n    site.siteMetadata.title,\n    locale\n  )\n  const pageTitle = `${title} - ${siteTitle}`\n  const authorJSONLD = {\n    \"@type\": `Person`,\n    name: author,\n  }\n\n  const logoJSONLD = {\n    \"@type\": `ImageObject`,\n    url: getImagePath(avatarImage),\n    \"@id\": urlJoin(siteUrl, withPrefix(`#logo`)),\n    caption: `${siteTitle} Logo`,\n  }\n\n  const schemaOrgJSONLD = [\n    {\n      \"@context\": `http://schema.org`,\n      \"@type\": `WebSite`,\n      \"@id\": urlJoin(siteUrl, withPrefix(`#website`)),\n      url: withPrefix(siteUrl),\n      name: siteTitle,\n      image: logoJSONLD,\n    },\n  ]\n  if (pageType === `detail`) {\n    const postURL = urlJoin(siteUrl, location.pathname)\n    const datePublished = new Date(item.date)\n    schemaOrgJSONLD.push(\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BreadcrumbList`,\n        itemListElement: [\n          {\n            \"@type\": `ListItem`,\n            position: 1,\n            item: {\n              \"@id\": postURL,\n              name: title,\n              image,\n            },\n          },\n        ],\n      },\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BlogPosting`,\n        url: postURL,\n        name: title,\n        headline: title,\n        image: { \"@type\": `ImageObject`, url: image },\n        author: authorJSONLD,\n        publisher: {\n          ...authorJSONLD,\n          \"@type\": `Organization`,\n          logo: logoJSONLD,\n        },\n        datePublished,\n        description: metaDescription,\n      }\n    )\n  }\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: lang || locale,\n      }}\n      title={pageTitle}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: `keywords`,\n          content: keywords.join(`,`),\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:creator`,\n          content: author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          image\n            ? [\n                {\n                  name: `og:image`,\n                  content: image,\n                },\n                {\n                  name: `og:image:alt`,\n                  content: imageAltText,\n                },\n                {\n                  name: `twitter:image`,\n                  content: image,\n                },\n                {\n                  name: `twitter:image:alt`,\n                  content: imageAltText,\n                },\n                {\n                  name: `twitter:card`,\n                  content: `summary_large_image`,\n                },\n              ]\n            : [\n                {\n                  name: `twitter:card`,\n                  content: `summary`,\n                },\n              ]\n        )\n        .concat(\n          telegram\n            ? [\n                {\n                  name: `telegram:channel`,\n                  content: telegram,\n                },\n              ]\n            : []\n        )\n        .concat(meta)}\n    >\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  meta: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n  imageSource: PropTypes.string,\n}\n\nexport default SEO\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport { localizedPath } from \"../helpers\"\nimport { useLocalization } from \"../hooks/use-localization\"\n\nexport const LocalizedLink = ({ to, language, ...props }) => {\n  const { defaultLang, locale } = useLocalization()\n  const linkLocale = language || locale\n\n  return <Link {...props} to={localizedPath(defaultLang, linkLocale, to)} />\n}\n","const kebabToSnakeCase = str => {\n  return str.replace(/-/g, \"_\")\n}\nexports.kebabToSnakeCase = kebabToSnakeCase\nconst t = (key, localize, defaultValue, locale = \"zh\") => {\n  let value = defaultValue\n  if (localize && Array.isArray(localize)) {\n    for (let i = 0; i < localize.length; i++) {\n      const localeItem = localize[i]\n      const currentLocale = localeItem.locale\n      if (locale === currentLocale) {\n        if (localeItem[key]) {\n          value = localeItem[key]\n          return value\n        }\n      }\n    }\n  }\n  return value\n}\nexports.t = t\nconst getTitle = (item, locale = \"zh\") => {\n  let finalTitle = item.title\n  let localize = []\n  if (item.parent && item.parent.localize) {\n    localize = item.parent.localize\n  }\n  const { provider } = item\n  if (provider === \"Product Hunt\") {\n    const titleArr = finalTitle.split(\" - \")\n    const pureTitle = titleArr[0]\n    const pureTagline = titleArr[1]\n    let finalTagline = t(\"tagline\", localize, pureTagline, locale)\n    finalTitle = `${pureTitle} - ${finalTagline}`\n  } else if (provider === \"Twitter\") {\n    const sharedContent = item.sharedContent\n    const retweeted =\n      sharedContent && sharedContent.title && finalTitle.startsWith(`RT @`)\n    let field = \"full_text\"\n    if (retweeted) {\n      field = \"retweeted_status_full_text\"\n      finalTitle = sharedContent.title\n    }\n\n    finalTitle = t(field, localize, finalTitle, locale)\n  } else {\n    finalTitle = t(\"title\", localize, finalTitle, locale)\n  }\n  return finalTitle\n}\nexports.getTitle = getTitle\nconst getSharedTitle = (item, locale = \"zh\") => {\n  const { sharedContent } = item\n\n  if (!sharedContent || !sharedContent.title) {\n    return null\n  }\n  let finalTitle = sharedContent.title\n  let localize = []\n  if (item.parent && item.parent.localize) {\n    localize = item.parent.localize\n  }\n  finalTitle = t(\"quoted_status_full_text\", localize, finalTitle, locale)\n  return finalTitle\n}\nexports.getSharedTitle = getSharedTitle\nconst getExcerpt = (item, locale = \"zh\") => {\n  let finalExcerpt = item.excerpt\n  let localize = []\n  if (item.parent && item.parent.localize) {\n    localize = item.parent.localize\n  }\n  const { provider } = item\n  if (provider === \"Product Hunt\" || provider === \"Youtube\") {\n    finalExcerpt = t(\"description\", localize, finalExcerpt, locale)\n  } else if (provider === \"Reddit\") {\n    finalExcerpt = t(\"the_new_excerpt\", localize, finalExcerpt, locale)\n  } else {\n    finalExcerpt = t(\"excerpt\", localize, finalExcerpt, locale)\n  }\n  return finalExcerpt\n}\nexports.getExcerpt = getExcerpt\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport SEO from \"gatsby-theme-timeline/src/components/seo\"\nconst NotFoundPage = () => (\n  <>\n    <SEO title=\"404: Not found\" />\n    <div\n      style={{\n        width: `100vw`,\n        height: `100vh`,\n        display: `flex`,\n        justifyContent: `center`,\n        alignItems: `center`,\n      }}\n    >\n      <div>\n        <h1>NOT FOUND</h1>\n        <p>\n          {`You just hit a route that doesn't exist... Please visit `}{\" \"}\n          <Link to=\"/\" className=\"link-style\">\n            Homepage\n          </Link>\n        </p>\n      </div>\n    </div>\n  </>\n)\nexport default NotFoundPage\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","export {\n  t,\n  getTitle,\n  getExcerpt,\n  getSharedTitle,\n  kebabToSnakeCase,\n} from \"../utils\"\n"],"sourceRoot":""}