{"version":3,"sources":["webpack:///../gatsby-theme-buzzing/src/components/process-string.js","webpack:///../gatsby-theme-buzzing/src/components/issue-plain-item.js","webpack:///../gatsby-theme-buzzing/src/components/issue-plain-page.js","webpack:///../gatsby-theme-buzzing/src/templates/issue-plain-query.js"],"names":["processReactString","type","body","arr","regex","fn","key","result","href","concat","console","log","emoji","tag","sx","width","ml","mr","mb","push","processString","ItemBox","props","item","locale","pageContext","datetime","imageRemote","author","originalUrl","authorUrl","channelUrl","channel","url","provider","finalAuthorUrl","finalAuthor","finalUrl","data-test","data-index","index","itemScope","itemType","m","p","itemProp","fontSize","whiteSpace","ProcessString","getTitle","h3","color","as","mt","img","maxHeight","display","src","alt","getExcerpt","hr","my","Items","data","basePath","issueNumber","currentPage","date","dateISO","items","allBlogPost","nodes","siteMetadata","site","pageTitle","title","i18next","t","maxWidth","mx","px","pt","h1","siteUrl","rel","content","padding","dateTime","pl","map","PostsPage"],"mappings":"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","file":"component---gatsby-theme-buzzing-src-templates-issue-plain-query-js-61a2c7a52287cab966e8.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, Link } from \"theme-ui\"\nimport processString from \"react-process-string\"\nimport Twemoji from \"react-twemoji\"\n//\nexport default function processReactString(type, body) {\n  let arr = [\n    {\n      regex: /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/,\n      fn: (key, result) => {\n        return (\n          <Link key={key} href={`${result[0]}`}>\n            <span> {result[0]}</span>\n          </Link>\n        )\n      },\n    },\n  ]\n  if (type === \"Twitter\") {\n    arr = arr.concat([\n      {\n        regex: /(?:^|[^a-zA-Z0-9_＠!@#$%&*])(?:(?:@|＠)(?!\\/))([a-zA-Z0-9/_]{1,15})(?:\\b(?!@|＠)|$)/,\n        fn: (key, result) => {\n          return (\n            <Link href={`https://twitter.com/${result[1]}`} key={key}>\n              <span> @{result[1]}</span>\n            </Link>\n          )\n        },\n      },\n      {\n        regex: /(?:^|[^a-zA-Z0-9_＠!@#$%&*])(?:#(?!\\/))([a-zA-Z0-9/_]{1,280})(?:\\b(?!#)|$)/,\n        fn: (key, result) => {\n          return (\n            <Link key={key} href={`https://twitter.com/hashtag/${result[1]}`}>\n              <span> #{result[1]}</span>\n            </Link>\n          )\n        },\n      },\n      {\n        regex: /(\\u00a9|\\u00ae|[\\u2000-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff])/,\n        fn: (key, result) => {\n          console.log(\"result[1]\", result[1])\n\n          const emoji = (\n            <Twemoji\n              tag=\"span\"\n              sx={{\n                \"> img\": {\n                  width: `1.2rem`,\n                  ml: `0.2rem`,\n                  mr: `0.075rem`,\n                  mb: `-0.2rem`,\n                },\n              }}\n              key={key}\n            >\n              {result[1]}\n            </Twemoji>\n          )\n          console.log(\"emoji\", emoji)\n          return emoji\n        },\n      },\n    ])\n  } else if (type === \"Youtube\") {\n    arr.push({\n      regex: /(?:^|[^a-zA-Z0-9_＠!@#$%&*])(?:#(?!\\/))([a-zA-Z0-9/_]{1,280})(?:\\b(?!#)|$)/,\n      fn: (key, result) => {\n        return (\n          <Link key={key} href={`https://www.youtube.com/hashtag/${result[1]}`}>\n            <span> #{result[1]}</span>\n          </Link>\n        )\n      },\n    })\n  }\n  const finalBody = processString(arr)(body)\n  return finalBody\n}\n","/** @jsx jsx */\nimport { jsx, Styled, Link } from \"theme-ui\"\nimport ProcessString from \"./process-string\"\nimport { getTitle, getExcerpt } from \"../util\"\nconst ItemBox = props => {\n  const {\n    item,\n    pageContext: { locale },\n  } = props\n  let {\n    datetime,\n    imageRemote,\n    author,\n    originalUrl,\n    authorUrl,\n    channelUrl,\n    channel,\n    url,\n    provider,\n  } = item\n  const finalAuthorUrl = authorUrl || channelUrl\n  const finalAuthor = author || channel\n  const finalUrl = originalUrl || url\n\n  return (\n    <li\n      data-test=\"item-container\"\n      data-index={props.index}\n      itemScope\n      itemType=\"https://schema.org/Article https://schema.org/itemListElement\"\n      sx={{ m: 0 }}\n    >\n      {provider === \"Twitter\" ? (\n        <Styled.p itemProp=\"name\" sx={{ fontSize: 2, whiteSpace: `pre-line` }}>\n          {ProcessString(provider, getTitle(item, locale))}\n        </Styled.p>\n      ) : (\n        <Styled.h3 sx={{}}>\n          <Link itemProp=\"name\" href={finalUrl} sx={{ color: \"text\" }}>\n            {getTitle(item, locale)}\n          </Link>\n        </Styled.h3>\n      )}\n      <Styled.p\n        as=\"sup\"\n        data-test=\"item-header\"\n        sx={{ color: \"#718096\", mt: \"-10px\" }}\n      >\n        Posted by{\" \"}\n        <Link href={finalAuthorUrl} itemProp=\"author\">\n          {finalAuthor}\n        </Link>{\" \"}\n        at{\" \"}\n        <Link href={finalUrl} itemProp=\"datePublished\">\n          {datetime}\n        </Link>\n      </Styled.p>\n      {imageRemote && (\n        <Styled.img\n          sx={{ maxHeight: \"512px\", m: \"0 auto\", display: \"block\" }}\n          src={imageRemote}\n          alt=\"item hero\"\n          itemProp=\"image\"\n        ></Styled.img>\n      )}\n      {provider !== \"Twitter\" && (\n        <Styled.p\n          itemProp=\"description\"\n          sx={{\n            color: \"textMuted\",\n            whiteSpace: `pre-line`,\n          }}\n        >\n          {ProcessString(provider, getExcerpt(item, locale))}\n        </Styled.p>\n      )}\n\n      <Styled.hr\n        sx={{\n          my: \"48px\",\n        }}\n      ></Styled.hr>\n    </li>\n  )\n}\nexport default ItemBox\n","/** @jsx jsx */\nimport ItemBox from \"./issue-plain-item\"\nimport { jsx, Styled, Link } from \"theme-ui\"\nimport i18next from \"i18next\"\nconst Items = ({ data, pageContext }) => {\n  const { basePath, currentPage: issueNumber, date, dateISO } = pageContext\n  const items = data.allBlogPost.nodes\n  const {\n    site: { siteMetadata },\n  } = data\n  const pageTitle =\n    siteMetadata.title +\n    \" \" +\n    i18next.t(`Weekly Selection`) +\n    \"-\" +\n    i18next.t(\"Issue {{issueNumber}}\", `Issue ${issueNumber}`, {\n      issueNumber,\n    })\n\n  return (\n    <div\n      sx={{\n        maxWidth: [`full`, `3xl`, `3xl`, `3xl`],\n        mx: `auto`,\n        px: [4, 4],\n        pt: 4,\n      }}\n      itemScope\n      itemType=\"https://schema.org/ItemList\"\n    >\n      <Styled.h1 sx={{ mb: 3, fontSize: 4 }} itemProp=\"name\">\n        {pageTitle}\n      </Styled.h1>\n      <address>\n        <Link href={siteMetadata.siteUrl} rel=\"author\">\n          {siteMetadata.author}\n        </Link>\n        <time\n          sx={{\n            color: \"textMuted\",\n            \"&:before\": {\n              content: \"'\\u2022'\",\n              padding: \"0 7px\",\n            },\n          }}\n          dateTime={dateISO}\n        >\n          {date}\n        </time>\n      </address>\n      <article>\n        <ul sx={{ pl: 0, m: 0 }}>\n          {items.map((item, index) => {\n            return (\n              <ItemBox\n                key={`item-box-${index}`}\n                index={index}\n                basePath={basePath}\n                item={item}\n                pageContext={pageContext}\n              ></ItemBox>\n            )\n          })}\n        </ul>\n      </article>\n    </div>\n  )\n}\nexport default Items\n","import { graphql } from \"gatsby\"\nimport PostsPage from \"../components/issue-plain-page\"\n\nexport default PostsPage\n\nexport const query = graphql`\n  query CustomItemsIssuesPostsQuery(\n    $maxHeight: Int!\n    $skip: Int!\n    $limit: Int!\n    $filter: BlogPostFilterInput\n    $tagsFilter: BlogPostFilterInput\n  ) {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n        social {\n          name\n          url\n          external\n          prefetch\n        }\n        menuLinks {\n          name\n          url\n          external\n          prefetch\n        }\n        localize {\n          locale\n          title\n          description\n          social {\n            name\n            url\n            external\n            prefetch\n          }\n          menuLinks {\n            name\n            url\n            external\n            prefetch\n          }\n        }\n      }\n    }\n    tagsGroup: allBlogPost(\n      sort: { fields: [date, slug], order: DESC }\n      filter: $tagsFilter\n    ) {\n      group(field: tags) {\n        fieldValue\n        totalCount\n      }\n    }\n    allBlogPost(\n      limit: $limit\n      skip: $skip\n      sort: { fields: [date, slug], order: DESC }\n      filter: $filter\n    ) {\n      nodes {\n        id\n        excerpt\n        slug\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        dateISO: date\n        datetime: date(formatString: \"YYYY-MM-DD HH:mm\")\n        tags\n        image {\n          childImageSharp {\n            fluid(maxHeight: $maxHeight) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        imageAlt\n        ... on SocialMediaPost {\n          provider\n          thirdPartyId\n          url\n          originalUrl\n          imageRemote\n          video {\n            url\n            embed\n            width\n            height\n          }\n          channel\n          channelUrl\n          author\n          authorUrl\n          authorImage {\n            childImageSharp {\n              fixed(width: 48, height: 48) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n          authorSlug\n          score\n          views\n          sharedCount\n          likeCount\n          sharedContent {\n            excerpt\n            slug\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            dateISO: date\n            datetime: date(formatString: \"YYYY-MM-DD HH:mm\")\n            tags\n            imageRemote\n            image {\n              childImageSharp {\n                fluid(maxHeight: $maxHeight) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            imageAlt\n            authorImage {\n              childImageSharp {\n                fixed(width: 24, height: 24) {\n                  ...GatsbyImageSharpFixed\n                }\n              }\n            }\n            video {\n              url\n              embed\n              width\n              height\n            }\n            channel\n            channelUrl\n            author\n            authorUrl\n            authorSlug\n            score\n            views\n            sharedCount\n            likeCount\n          }\n          parent {\n            ... on RedditJson {\n              localize {\n                title\n                the_new_excerpt\n                locale\n              }\n            }\n            ... on HnJson {\n              localize {\n                title\n                locale\n              }\n            }\n            ... on RedirectJson {\n              localize {\n                title\n                locale\n              }\n            }\n            ... on YoutubeJson {\n              localize {\n                title\n                description\n                locale\n              }\n            }\n            ... on PhJson {\n              localize {\n                description\n                tagline\n                locale\n              }\n            }\n            ... on TweetJson {\n              localize {\n                locale\n                full_text\n                quoted_status_full_text\n                retweeted_status_full_text\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}