{"version":3,"sources":["webpack:///../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///../gatsby-theme-buzzing/src/gatsby-theme-timeline/components/seo.js","webpack:///../node_modules/gatsby-theme-i18n/src/components/localized-link.js","webpack:///../gatsby-theme-buzzing/src/pages/404.js","webpack:///../node_modules/url-join/lib/url-join.js","webpack:///../gatsby-theme-buzzing/src/util.js"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","SEO","description","lang","meta","title","imageSource","imageAlt","location","pageType","item","useStaticQuery","site","avatar","locale","useLocalization","siteDescription","t","siteMetadata","localize","metaDescription","author","siteUrl","keywords","avatarImage","childImageSharp","fixed","src","getImagePath","imageURI","match","urlJoin","withPrefix","image","imageAltText","siteTitle","pageTitle","authorJSONLD","name","logoJSONLD","url","caption","schemaOrgJSONLD","postURL","pathname","datePublished","Date","date","push","itemListElement","position","headline","publisher","logo","htmlAttributes","content","join","property","concat","type","JSON","stringify","defaultProps","LocalizedLink","to","language","props","defaultLang","linkLocale","localizedPath","NotFoundPage","style","width","height","display","justifyContent","alignItems","className","normalize","strArray","resultArray","TypeError","first","shift","replace","component","str","parts","split","arguments","slice","call","module","exports","definition","defaultValue","value","Array","isArray","localeItem"],"mappings":"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","file":"component---gatsby-theme-buzzing-src-pages-404-js-c6969cfd2dbebc9774aa.js","sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql, withPrefix } from \"gatsby\"\nimport { useLocalization } from \"gatsby-theme-i18n\"\nimport urlJoin from \"url-join\"\nimport { t } from \"../../util\"\nfunction SEO({\n  description,\n  lang,\n  meta,\n  title,\n  imageSource,\n  imageAlt,\n  location,\n  pageType,\n  item,\n}) {\n  const { site, avatar } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n            keywords\n            localize {\n              locale\n              title\n              description\n              author\n              keywords\n            }\n          }\n        }\n        avatar: file(absolutePath: { regex: \"/avatar.(jpeg|jpg|gif|png)/\" }) {\n          childImageSharp {\n            fixed(width: 48, height: 48) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const { locale } = useLocalization()\n  const siteDescription = t(\n    \"description\",\n    site.siteMetadata.localize,\n    site.siteMetadata.description,\n    locale\n  )\n  const metaDescription = description || siteDescription\n  const author = t(\n    \"author\",\n    site.siteMetadata.localize,\n    site.siteMetadata.author,\n    locale\n  )\n  const siteUrl = site.siteMetadata.siteUrl\n  const keywords = t(\n    \"keywords\",\n    site.siteMetadata.localize,\n    site.siteMetadata.keywords,\n    locale\n  )\n  const avatarImage = avatar.childImageSharp.fixed.src\n  const getImagePath = imageURI => {\n    if (\n      !imageURI.match(\n        `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n      )\n    )\n      return urlJoin(siteUrl, withPrefix(imageURI))\n\n    return imageURI\n  }\n  const image = imageSource ? getImagePath(imageSource) : null\n  const imageAltText = imageAlt || metaDescription\n  const siteTitle = t(\n    \"title\",\n    site.siteMetadata.localize,\n    site.siteMetadata.title,\n    locale\n  )\n  const pageTitle = `${title} - ${siteTitle}`\n  const authorJSONLD = {\n    \"@type\": `Person`,\n    name: author,\n  }\n\n  const logoJSONLD = {\n    \"@type\": `ImageObject`,\n    url: getImagePath(avatarImage),\n    \"@id\": urlJoin(siteUrl, withPrefix(`#logo`)),\n    caption: `${siteTitle} Logo`,\n  }\n\n  const schemaOrgJSONLD = [\n    {\n      \"@context\": `http://schema.org`,\n      \"@type\": `WebSite`,\n      \"@id\": urlJoin(siteUrl, withPrefix(`#website`)),\n      url: withPrefix(siteUrl),\n      name: siteTitle,\n      image: logoJSONLD,\n    },\n  ]\n  if (pageType === `detail`) {\n    const postURL = urlJoin(siteUrl, location.pathname)\n    const datePublished = new Date(item.date)\n    schemaOrgJSONLD.push(\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BreadcrumbList`,\n        itemListElement: [\n          {\n            \"@type\": `ListItem`,\n            position: 1,\n            item: {\n              \"@id\": postURL,\n              name: title,\n              image,\n            },\n          },\n        ],\n      },\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BlogPosting`,\n        url: postURL,\n        name: title,\n        headline: title,\n        image: { \"@type\": `ImageObject`, url: image },\n        author: authorJSONLD,\n        publisher: {\n          ...authorJSONLD,\n          \"@type\": `Organization`,\n          logo: logoJSONLD,\n        },\n        datePublished,\n        description: metaDescription,\n      }\n    )\n  }\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: lang || locale,\n      }}\n      title={pageTitle}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: `keywords`,\n          content: keywords.join(`,`),\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:creator`,\n          content: author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          imageSource\n            ? [\n                {\n                  name: `og:image`,\n                  content: image,\n                },\n                {\n                  name: `og:image:alt`,\n                  content: imageAltText,\n                },\n                {\n                  name: `twitter:image`,\n                  content: image,\n                },\n                {\n                  name: `twitter:image:alt`,\n                  content: imageAltText,\n                },\n                {\n                  name: `twitter:card`,\n                  content: `summary_large_image`,\n                },\n              ]\n            : [\n                {\n                  name: `twitter:card`,\n                  content: `summary`,\n                },\n              ]\n        )\n        .concat(meta)}\n    >\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  meta: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n  imageSource: PropTypes.string,\n}\n\nexport default SEO\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport { localizedPath } from \"../helpers\"\nimport { useLocalization } from \"../hooks/use-localization\"\n\nexport const LocalizedLink = ({ to, language, ...props }) => {\n  const { defaultLang, locale } = useLocalization()\n  const linkLocale = language || locale\n\n  return <Link {...props} to={localizedPath(defaultLang, linkLocale, to)} />\n}\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport SEO from \"gatsby-theme-timeline/src/components/seo\"\nconst NotFoundPage = () => (\n  <>\n    <SEO title=\"404: Not found\" />\n    <div\n      style={{\n        width: `100vw`,\n        height: `100vh`,\n        display: `flex`,\n        justifyContent: `center`,\n        alignItems: `center`,\n      }}\n    >\n      <div>\n        <h1>NOT FOUND</h1>\n        <p>\n          {`You just hit a route that doesn't exist... Please visit `}{\" \"}\n          <Link to=\"/\" className=\"link-style\">\n            Homepage\n          </Link>\n        </p>\n      </div>\n    </div>\n  </>\n)\nexport default NotFoundPage\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","export const kebabToSnakeCase = str => {\n  return str.replace(/-/g, \"_\")\n}\n\nexport const t = (key, localize, defaultValue, locale = \"zh\") => {\n  let value = defaultValue\n  if (localize && Array.isArray(localize)) {\n    for (let i = 0; i < localize.length; i++) {\n      const localeItem = localize[i]\n      const currentLocale = localeItem.locale\n      if (locale === currentLocale) {\n        if (localeItem[key]) {\n          value = localeItem[key]\n          return value\n        }\n      }\n    }\n  }\n  return value\n}\n"],"sourceRoot":""}